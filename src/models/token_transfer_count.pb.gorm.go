// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: token_transfer_count.proto

package models

import (
	context "context"
	fmt "fmt"
	
	_ "github.com/infobloxopen/protoc-gen-gorm/options"
	math "math"

	gorm2 "github.com/infobloxopen/atlas-app-toolkit/gorm"
	errors1 "github.com/infobloxopen/protoc-gen-gorm/errors"
	gorm1 "github.com/jinzhu/gorm"
	field_mask1 "google.golang.org/genproto/protobuf/field_mask"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = fmt.Errorf
var _ = math.Inf

type TokenTransferCountORM struct {
	Id              uint64
	LogIndex        int32  `gorm:"index:token_transfer_count_idx_log_index"`
	TransactionHash string `gorm:"index:token_transfer_count_idx_transaction_hash"`
}

// TableName overrides the default tablename generated by GORM
func (TokenTransferCountORM) TableName() string {
	return "token_transfer_counts"
}

// ToORM runs the BeforeToORM hook if present, converts the fields of this
// object to ORM format, runs the AfterToORM hook, then returns the ORM object
func (m *TokenTransferCount) ToORM(ctx context.Context) (TokenTransferCountORM, error) {
	to := TokenTransferCountORM{}
	var err error
	if prehook, ok := interface{}(m).(TokenTransferCountWithBeforeToORM); ok {
		if err = prehook.BeforeToORM(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TransactionHash = m.TransactionHash
	to.LogIndex = m.LogIndex
	to.Id = m.Id
	if posthook, ok := interface{}(m).(TokenTransferCountWithAfterToORM); ok {
		err = posthook.AfterToORM(ctx, &to)
	}
	return to, err
}

// ToPB runs the BeforeToPB hook if present, converts the fields of this
// object to PB format, runs the AfterToPB hook, then returns the PB object
func (m *TokenTransferCountORM) ToPB(ctx context.Context) (TokenTransferCount, error) {
	to := TokenTransferCount{}
	var err error
	if prehook, ok := interface{}(m).(TokenTransferCountWithBeforeToPB); ok {
		if err = prehook.BeforeToPB(ctx, &to); err != nil {
			return to, err
		}
	}
	to.TransactionHash = m.TransactionHash
	to.LogIndex = m.LogIndex
	to.Id = m.Id
	if posthook, ok := interface{}(m).(TokenTransferCountWithAfterToPB); ok {
		err = posthook.AfterToPB(ctx, &to)
	}
	return to, err
}

// The following are interfaces you can implement for special behavior during ORM/PB conversions
// of type TokenTransferCount the arg will be the target, the caller the one being converted from

// TokenTransferCountBeforeToORM called before default ToORM code
type TokenTransferCountWithBeforeToORM interface {
	BeforeToORM(context.Context, *TokenTransferCountORM) error
}

// TokenTransferCountAfterToORM called after default ToORM code
type TokenTransferCountWithAfterToORM interface {
	AfterToORM(context.Context, *TokenTransferCountORM) error
}

// TokenTransferCountBeforeToPB called before default ToPB code
type TokenTransferCountWithBeforeToPB interface {
	BeforeToPB(context.Context, *TokenTransferCount) error
}

// TokenTransferCountAfterToPB called after default ToPB code
type TokenTransferCountWithAfterToPB interface {
	AfterToPB(context.Context, *TokenTransferCount) error
}

// DefaultCreateTokenTransferCount executes a basic gorm create call
func DefaultCreateTokenTransferCount(ctx context.Context, in *TokenTransferCount, db *gorm1.DB) (*TokenTransferCount, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithBeforeCreate_); ok {
		if db, err = hook.BeforeCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Create(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithAfterCreate_); ok {
		if err = hook.AfterCreate_(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	return &pbResponse, err
}

type TokenTransferCountORMWithBeforeCreate_ interface {
	BeforeCreate_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountORMWithAfterCreate_ interface {
	AfterCreate_(context.Context, *gorm1.DB) error
}

// DefaultReadTokenTransferCount executes a basic gorm read call
func DefaultReadTokenTransferCount(ctx context.Context, in *TokenTransferCount, db *gorm1.DB) (*TokenTransferCount, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if ormObj.Id == 0 {
		return nil, errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithBeforeReadApplyQuery); ok {
		if db, err = hook.BeforeReadApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	if db, err = gorm2.ApplyFieldSelection(ctx, db, nil, &TokenTransferCountORM{}); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithBeforeReadFind); ok {
		if db, err = hook.BeforeReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	ormResponse := TokenTransferCountORM{}
	if err = db.Where(&ormObj).First(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormResponse).(TokenTransferCountORMWithAfterReadFind); ok {
		if err = hook.AfterReadFind(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormResponse.ToPB(ctx)
	return &pbResponse, err
}

type TokenTransferCountORMWithBeforeReadApplyQuery interface {
	BeforeReadApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountORMWithBeforeReadFind interface {
	BeforeReadFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountORMWithAfterReadFind interface {
	AfterReadFind(context.Context, *gorm1.DB) error
}

func DefaultDeleteTokenTransferCount(ctx context.Context, in *TokenTransferCount, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return err
	}
	if ormObj.Id == 0 {
		return errors1.EmptyIdError
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithBeforeDelete_); ok {
		if db, err = hook.BeforeDelete_(ctx, db); err != nil {
			return err
		}
	}
	err = db.Where(&ormObj).Delete(&TokenTransferCountORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithAfterDelete_); ok {
		err = hook.AfterDelete_(ctx, db)
	}
	return err
}

type TokenTransferCountORMWithBeforeDelete_ interface {
	BeforeDelete_(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountORMWithAfterDelete_ interface {
	AfterDelete_(context.Context, *gorm1.DB) error
}

func DefaultDeleteTokenTransferCountSet(ctx context.Context, in []*TokenTransferCount, db *gorm1.DB) error {
	if in == nil {
		return errors1.NilArgumentError
	}
	var err error
	keys := []uint64{}
	for _, obj := range in {
		ormObj, err := obj.ToORM(ctx)
		if err != nil {
			return err
		}
		if ormObj.Id == 0 {
			return errors1.EmptyIdError
		}
		keys = append(keys, ormObj.Id)
	}
	if hook, ok := (interface{}(&TokenTransferCountORM{})).(TokenTransferCountORMWithBeforeDeleteSet); ok {
		if db, err = hook.BeforeDeleteSet(ctx, in, db); err != nil {
			return err
		}
	}
	err = db.Where("id in (?)", keys).Delete(&TokenTransferCountORM{}).Error
	if err != nil {
		return err
	}
	if hook, ok := (interface{}(&TokenTransferCountORM{})).(TokenTransferCountORMWithAfterDeleteSet); ok {
		err = hook.AfterDeleteSet(ctx, in, db)
	}
	return err
}

type TokenTransferCountORMWithBeforeDeleteSet interface {
	BeforeDeleteSet(context.Context, []*TokenTransferCount, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountORMWithAfterDeleteSet interface {
	AfterDeleteSet(context.Context, []*TokenTransferCount, *gorm1.DB) error
}

// DefaultStrictUpdateTokenTransferCount clears / replaces / appends first level 1:many children and then executes a gorm update call
func DefaultStrictUpdateTokenTransferCount(ctx context.Context, in *TokenTransferCount, db *gorm1.DB) (*TokenTransferCount, error) {
	if in == nil {
		return nil, fmt.Errorf("Nil argument to DefaultStrictUpdateTokenTransferCount")
	}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	lockedRow := &TokenTransferCountORM{}
	db.Model(&ormObj).Set("gorm:query_option", "FOR UPDATE").Where("id=?", ormObj.Id).First(lockedRow)
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithBeforeStrictUpdateCleanup); ok {
		if db, err = hook.BeforeStrictUpdateCleanup(ctx, db); err != nil {
			return nil, err
		}
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithBeforeStrictUpdateSave); ok {
		if db, err = hook.BeforeStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	if err = db.Save(&ormObj).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithAfterStrictUpdateSave); ok {
		if err = hook.AfterStrictUpdateSave(ctx, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := ormObj.ToPB(ctx)
	if err != nil {
		return nil, err
	}
	return &pbResponse, err
}

type TokenTransferCountORMWithBeforeStrictUpdateCleanup interface {
	BeforeStrictUpdateCleanup(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountORMWithBeforeStrictUpdateSave interface {
	BeforeStrictUpdateSave(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountORMWithAfterStrictUpdateSave interface {
	AfterStrictUpdateSave(context.Context, *gorm1.DB) error
}

// DefaultPatchTokenTransferCount executes a basic gorm update call with patch behavior
func DefaultPatchTokenTransferCount(ctx context.Context, in *TokenTransferCount, updateMask *field_mask1.FieldMask, db *gorm1.DB) (*TokenTransferCount, error) {
	if in == nil {
		return nil, errors1.NilArgumentError
	}
	var pbObj TokenTransferCount
	var err error
	if hook, ok := interface{}(&pbObj).(TokenTransferCountWithBeforePatchRead); ok {
		if db, err = hook.BeforePatchRead(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbReadRes, err := DefaultReadTokenTransferCount(ctx, &TokenTransferCount{Id: in.GetId()}, db)
	if err != nil {
		return nil, err
	}
	pbObj = *pbReadRes
	if hook, ok := interface{}(&pbObj).(TokenTransferCountWithBeforePatchApplyFieldMask); ok {
		if db, err = hook.BeforePatchApplyFieldMask(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	if _, err := DefaultApplyFieldMaskTokenTransferCount(ctx, &pbObj, in, updateMask, "", db); err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&pbObj).(TokenTransferCountWithBeforePatchSave); ok {
		if db, err = hook.BeforePatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	pbResponse, err := DefaultStrictUpdateTokenTransferCount(ctx, &pbObj, db)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(pbResponse).(TokenTransferCountWithAfterPatchSave); ok {
		if err = hook.AfterPatchSave(ctx, in, updateMask, db); err != nil {
			return nil, err
		}
	}
	return pbResponse, nil
}

type TokenTransferCountWithBeforePatchRead interface {
	BeforePatchRead(context.Context, *TokenTransferCount, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountWithBeforePatchApplyFieldMask interface {
	BeforePatchApplyFieldMask(context.Context, *TokenTransferCount, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountWithBeforePatchSave interface {
	BeforePatchSave(context.Context, *TokenTransferCount, *field_mask1.FieldMask, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountWithAfterPatchSave interface {
	AfterPatchSave(context.Context, *TokenTransferCount, *field_mask1.FieldMask, *gorm1.DB) error
}

// DefaultPatchSetTokenTransferCount executes a bulk gorm update call with patch behavior
func DefaultPatchSetTokenTransferCount(ctx context.Context, objects []*TokenTransferCount, updateMasks []*field_mask1.FieldMask, db *gorm1.DB) ([]*TokenTransferCount, error) {
	if len(objects) != len(updateMasks) {
		return nil, fmt.Errorf(errors1.BadRepeatedFieldMaskTpl, len(updateMasks), len(objects))
	}

	results := make([]*TokenTransferCount, 0, len(objects))
	for i, patcher := range objects {
		pbResponse, err := DefaultPatchTokenTransferCount(ctx, patcher, updateMasks[i], db)
		if err != nil {
			return nil, err
		}

		results = append(results, pbResponse)
	}

	return results, nil
}

// DefaultApplyFieldMaskTokenTransferCount patches an pbObject with patcher according to a field mask.
func DefaultApplyFieldMaskTokenTransferCount(ctx context.Context, patchee *TokenTransferCount, patcher *TokenTransferCount, updateMask *field_mask1.FieldMask, prefix string, db *gorm1.DB) (*TokenTransferCount, error) {
	if patcher == nil {
		return nil, nil
	} else if patchee == nil {
		return nil, errors1.NilArgumentError
	}
	var err error
	for _, f := range updateMask.Paths {
		if f == prefix+"TransactionHash" {
			patchee.TransactionHash = patcher.TransactionHash
			continue
		}
		if f == prefix+"LogIndex" {
			patchee.LogIndex = patcher.LogIndex
			continue
		}
		if f == prefix+"Id" {
			patchee.Id = patcher.Id
			continue
		}
	}
	if err != nil {
		return nil, err
	}
	return patchee, nil
}

// DefaultListTokenTransferCount executes a gorm list call
func DefaultListTokenTransferCount(ctx context.Context, db *gorm1.DB) ([]*TokenTransferCount, error) {
	in := TokenTransferCount{}
	ormObj, err := in.ToORM(ctx)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithBeforeListApplyQuery); ok {
		if db, err = hook.BeforeListApplyQuery(ctx, db); err != nil {
			return nil, err
		}
	}
	db, err = gorm2.ApplyCollectionOperators(ctx, db, &TokenTransferCountORM{}, &TokenTransferCount{}, nil, nil, nil, nil)
	if err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithBeforeListFind); ok {
		if db, err = hook.BeforeListFind(ctx, db); err != nil {
			return nil, err
		}
	}
	db = db.Where(&ormObj)
	db = db.Order("id")
	ormResponse := []TokenTransferCountORM{}
	if err := db.Find(&ormResponse).Error; err != nil {
		return nil, err
	}
	if hook, ok := interface{}(&ormObj).(TokenTransferCountORMWithAfterListFind); ok {
		if err = hook.AfterListFind(ctx, db, &ormResponse); err != nil {
			return nil, err
		}
	}
	pbResponse := []*TokenTransferCount{}
	for _, responseEntry := range ormResponse {
		temp, err := responseEntry.ToPB(ctx)
		if err != nil {
			return nil, err
		}
		pbResponse = append(pbResponse, &temp)
	}
	return pbResponse, nil
}

type TokenTransferCountORMWithBeforeListApplyQuery interface {
	BeforeListApplyQuery(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountORMWithBeforeListFind interface {
	BeforeListFind(context.Context, *gorm1.DB) (*gorm1.DB, error)
}
type TokenTransferCountORMWithAfterListFind interface {
	AfterListFind(context.Context, *gorm1.DB, *[]TokenTransferCountORM) error
}
