name: release-prod

on:
  release:
    tags:
      - "v*.*.*"

jobs:
  docker:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Bring up DBs
        run: docker-compose -f docker-compose.db.yml up -d

      - name: Run unit tests
        run: cd src && go test ./... -v

      - name: Bring up stack
        run: make up

      - name: Run integration tests
        run: cd tests && go test ./... -v

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_WORKER }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_WORKER }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr-worker
        uses: aws-actions/amazon-ecr-login@v1

      - name: Tag name
        id: source
        run: |
          echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Worker - Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-worker.outputs.registry }}
          ECR_REPOSITORY: icon-transactions-worker
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build --build-arg SERVICE_NAME=worker -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_API }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_API }}
          aws-region: us-west-2

      - name: Login to Amazon ECR
        id: login-ecr-api
        uses: aws-actions/amazon-ecr-login@v1

      - name: API - Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr-api.outputs.registry }}
          ECR_REPOSITORY: icon-transactions-api
          IMAGE_TAG: ${{ github.run_number }}
        run: |
          docker build --build-arg SERVICE_NAME=api -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      - name: Tag name
        id: source
        run: |
          echo ::set-output name=TAG::${GITHUB_REF#refs/tags/}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args:
            - SERVICE_NAME=api
          file: ./Dockerfile
          target: prod
          push: true
          tags: |
            geometrylabs/icon-transactions-api:latest
            geometrylabs/icon-transactions-api:${{ steps.source.outputs.TAG }}

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: .
          build-args:
            - SERVICE_NAME=worker
          file: ./Dockerfile
          target: prod
          push: true
          tags: |
            geometrylabs/icon-transactions-worker:latest
            geometrylabs/icon-transactions-worker:${{ steps.source.outputs.TAG }}

      - name: Update prod-mainnet deployment values file and re-commit
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'chart/deployments/prod-mainnet/values.test.yaml'
          propertyPath: 'deployment.image.tag'
          value: ${{ github.run_number }}
          branch: deployment
          targetBranch: main
          createPR: 'false'
          message: 'Update prod deployment image version to ${{ github.run_number }}'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Update prod-sejong deployment values file and re-commit
        uses: fjogeleit/yaml-update-action@master
        with:
          valueFile: 'chart/deployments/prod-sejong/values.test.yaml'
          propertyPath: 'deployment.image.tag'
          value: ${{ github.run_number }}
          branch: deployment
          targetBranch: main
          createPR: 'false'
          message: 'Update prod deployment image version to ${{ github.run_number }}'
          token: ${{ secrets.GITHUB_TOKEN }}
